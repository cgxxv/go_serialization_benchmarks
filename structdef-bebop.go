// Code generated by bebopc-go; DO NOT EDIT.

package goserbench

import (
	"io"

	"github.com/200sc/bebop"
	"github.com/200sc/bebop/iohelp"
)

var _ bebop.Record = &BebopBufA{}

type BebopBufA struct {
	Name     string
	BirthDay uint64
	Phone    string
	Siblings int32
	Spouse   bool
	Money    float64
}

func (bbp BebopBufA) MarshalBebop() []byte {
	buf := make([]byte, bbp.bodyLen())
	bbp.MarshalBebopTo(buf)
	return buf
}

func (bbp BebopBufA) MarshalBebopTo(buf []byte) {
	at := 0
	iohelp.WriteUint32Bytes(buf[at:], uint32(len(bbp.Name)))
	at += 4
	copy(buf[at:at+len(bbp.Name)], []byte(bbp.Name))
	at += len(bbp.Name)
	iohelp.WriteUint64Bytes(buf[at:], bbp.BirthDay)
	at += 8
	iohelp.WriteUint32Bytes(buf[at:], uint32(len(bbp.Phone)))
	at += 4
	copy(buf[at:at+len(bbp.Phone)], []byte(bbp.Phone))
	at += len(bbp.Phone)
	iohelp.WriteInt32Bytes(buf[at:], bbp.Siblings)
	at += 4
	iohelp.WriteBoolBytes(buf[at:], bbp.Spouse)
	at += 1
	iohelp.WriteFloat64Bytes(buf[at:], bbp.Money)
	at += 8
}

func (bbp *BebopBufA) UnmarshalBebop(buf []byte) (err error) {
	at := 0
	bbp.Name, err = iohelp.ReadStringBytes(buf[at:])
	if err != nil {
		return err
	}
	at += 4 + len(bbp.Name)
	if len(buf[at:]) < 8 {
		return iohelp.ErrTooShort
	}
	bbp.BirthDay = iohelp.ReadUint64Bytes(buf[at:])
	at += 8
	bbp.Phone, err = iohelp.ReadStringBytes(buf[at:])
	if err != nil {
		return err
	}
	at += 4 + len(bbp.Phone)
	if len(buf[at:]) < 4 {
		return iohelp.ErrTooShort
	}
	bbp.Siblings = iohelp.ReadInt32Bytes(buf[at:])
	at += 4
	if len(buf[at:]) < 1 {
		return iohelp.ErrTooShort
	}
	bbp.Spouse = iohelp.ReadBoolBytes(buf[at:])
	at += 1
	if len(buf[at:]) < 8 {
		return iohelp.ErrTooShort
	}
	bbp.Money = iohelp.ReadFloat64Bytes(buf[at:])
	at += 8
	return nil
}

func (bbp BebopBufA) EncodeBebop(iow io.Writer) (err error) {
	w := iohelp.NewErrorWriter(iow)
	iohelp.WriteUint32(w, uint32(len(bbp.Name)))
	w.Write([]byte(bbp.Name))
	iohelp.WriteUint64(w, bbp.BirthDay)
	iohelp.WriteUint32(w, uint32(len(bbp.Phone)))
	w.Write([]byte(bbp.Phone))
	iohelp.WriteInt32(w, bbp.Siblings)
	iohelp.WriteBool(w, bbp.Spouse)
	iohelp.WriteFloat64(w, bbp.Money)
	return w.Err
}

func (bbp *BebopBufA) DecodeBebop(ior io.Reader) (err error) {
	r := iohelp.NewErrorReader(ior)
	bbp.Name = iohelp.ReadString(r)
	bbp.BirthDay = iohelp.ReadUint64(r)
	bbp.Phone = iohelp.ReadString(r)
	bbp.Siblings = iohelp.ReadInt32(r)
	bbp.Spouse = iohelp.ReadBool(r)
	bbp.Money = iohelp.ReadFloat64(r)
	return r.Err
}

func (bbp BebopBufA) bodyLen() int {
	bodyLen := 0
	bodyLen += 4
	bodyLen += len(bbp.Name)
	bodyLen += 8
	bodyLen += 4
	bodyLen += len(bbp.Phone)
	bodyLen += 4
	bodyLen += 1
	bodyLen += 8
	return bodyLen
}

func makeBebopBufA(r iohelp.ErrorReader) (BebopBufA, error) {
	v := BebopBufA{}
	err := v.DecodeBebop(r)
	return v, err
}

func makeBebopBufAFromBytes(buf []byte) (BebopBufA, error) {
	v := BebopBufA{}
	err := v.UnmarshalBebop(buf)
	return v, err
}
